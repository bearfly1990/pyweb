{"version":3,"sources":["serviceWorker.js","testCorrespond/PostItem.js","testCorrespond/PostList.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","PostItem","_this$props","this","props","title","author","date","react_default","a","createElement","Component","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handle_click","t","assertThisInitialized","fetch","method","then","res","console","log","json","data","setState","news","state","onClick","map","item","i","key","testCorrespond_PostItem","ReactDOM","render","testCorrespond_PostList","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yGCCSC,mLAjBF,IAAAC,EACwBC,KAAKC,MAA1BC,EADHH,EACGG,MAAMC,EADTJ,EACSI,OAAOC,EADhBL,EACgBK,KACrB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACML,GAENG,EAAAC,EAAAC,cAAA,sCACQF,EAAAC,EAAAC,cAAA,YAAQJ,IAEhBE,EAAAC,EAAAC,cAAA,4CACSF,EAAAC,EAAAC,cAAA,YAAQH,YAZVI,aCgDRC,cA9CX,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KAWVe,aAAe,WACX,IAAIC,EAACN,OAAAO,EAAA,EAAAP,CAAAD,GACLS,MAAM,QAAS,CAACC,OAAQ,QAAQC,KAC5B,SAAUC,GACNC,QAAQC,IAAIF,GACZA,EAAIG,OAAOJ,KAAK,SAAUK,GAClBH,QAAQC,IAAIE,GACZT,EAAEU,SAAS,CACPC,KAAKF,SAlBzBhB,EAAKmB,MAAQ,CACTD,KAAK,CAACF,KAAK,CACP,CACIxB,MAAM,wDACNC,OAAO,eACPC,KAAK,uBAPHM,wEA2Bd,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQuB,QAAS9B,KAAKgB,cAAtB,UACAX,EAAAC,EAAAC,cAAA,WAFJ,iCAISgB,QAAQC,IAAIxB,KAAK6B,MAAMD,MACvB5B,KAAK6B,MAAMD,KAAX,KAAwBG,IAAI,SAACC,EAAKC,GAAN,OAC7B5B,EAAAC,EAAAC,cAAA,OAAK2B,IAAKD,GACV5B,EAAAC,EAAAC,cAAC4B,EAAD,CACIjC,MAAS8B,EAAK9B,MACdC,OAAU6B,EAAK7B,OACfC,KAAQ4B,EAAK5B,kBAvCdI,aCMvB4B,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAcC,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,kCInInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.91cf7863.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{Component} from 'react';\r\nclass PostItem extends Component{\r\n    render() {\r\n        const { title,author,date} = this.props;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    { title }\r\n                </div>\r\n                <div>\r\n                    创建人：<span>{ author }</span>\r\n                </div>\r\n                <div>\r\n                    创建时间：<span>{ date }</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostItem;","import React,{Component} from 'react';\r\nimport PostItem from './PostItem';\r\nclass PostList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            news:{data:[\r\n                {\r\n                    title:\"大家一起来讨论React吧\",\r\n                    author:\"张三\",\r\n                    date:\"2017-09-01 10:00\"\r\n                }\r\n            ]}\r\n        };\r\n    }\r\n    handle_click = ()=>{\r\n        let t = this;\r\n        fetch(\"/data\", {method: 'GET'}).then(\r\n            function (res) {\r\n                console.log(res);\r\n                res.json().then(function (data) {\r\n                        console.log(data);\r\n                        t.setState({\r\n                            news:data\r\n                        });\r\n                    }\r\n                )\r\n            });\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.handle_click}>button</button>\r\n                <br/>\r\n                帖子列表：\r\n                    {console.log(this.state.news)}\r\n                    {this.state.news['data'].map((item,i) =>\r\n                    <div key={i}>\r\n                    <PostItem\r\n                        title = {item.title}\r\n                        author = {item.author}\r\n                        date = {item.date}\r\n                    />\r\n                    </div>\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PostList from \"./testCorrespond/PostList\"\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<PostList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}